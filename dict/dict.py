#!/bin/python3

import xml.etree.ElementTree as ET
from operator import itemgetter

dic = open('/home/arch/Git/r2k/dict/RaikuDict', 'w', encoding='utf-8')
# bad = open('/home/arch/temp/RaikuDictLong', 'w', encoding='utf-8')

wbuf = []

def add_combinations(kebs, rebs):
    for i in kebs:
        for j in rebs:
            wbuf.append([j, i])

K2H = { 'ァ': 'ぁ', 'ア': 'あ', 'ィ': 'ぃ', 'イ': 'い', 'ゥ': 'ぅ', 'ウ': 'う', 'ェ': 'ぇ', 'エ': 'え', 
        'ォ': 'ぉ', 'オ': 'お', 'カ': 'か', 'ガ': 'が', 'キ': 'き', 'ギ': 'ぎ', 'ク': 'く', 'グ': 'ぐ',
        'ケ': 'け', 'ゲ': 'げ', 'コ': 'こ', 'ゴ': 'ご', 'サ': 'さ', 'ザ': 'ざ', 'シ': 'し', 'ジ': 'じ', 
        'ス': 'す', 'ズ': 'ず', 'セ': 'せ', 'ゼ': 'ぜ', 'ソ': 'そ', 'ゾ': 'ぞ', 'タ': 'た', 'ダ': 'だ', 
        'チ': 'ち', 'ヂ': 'ぢ', 'ッ': 'っ', 'ツ': 'つ', 'ヅ': 'づ', 'テ': 'て', 'デ': 'で', 'ト': 'と', 
        'ド': 'ど', 'ナ': 'な', 'ニ': 'に', 'ヌ': 'ぬ', 'ネ': 'ね', 'ノ': 'の', 'ハ': 'は', 'バ': 'ば', 
        'パ': 'ぱ', 'ヒ': 'ひ', 'ビ': 'び', 'ピ': 'ぴ', 'フ': 'ふ', 'ブ': 'ぶ', 'プ': 'ぷ', 'ヘ': 'へ',
        'ベ': 'べ', 'ペ': 'ぺ', 'ホ': 'ほ', 'ボ': 'ぼ', 'ポ': 'ぽ', 'マ': 'ま', 'ミ': 'み', 'ム': 'む',
        'メ': 'め', 'モ': 'も', 'ャ': 'ゃ', 'ヤ': 'や', 'ュ': 'ゅ', 'ユ': 'ゆ', 'ョ': 'ょ', 'ヨ': 'よ',
        'ラ': 'ら', 'リ': 'り', 'ル': 'る', 'レ': 'れ', 'ロ': 'ろ', 'ワ': 'わ', 'ヲ': 'を', 'ン': 'ん',
        'ー': 'ー', 'ヮ': 'ゎ', 'ヰ': 'ゐ', 'ヱ': 'ゑ', 'ヵ': 'ゕ', 'ヶ': 'ゖ', 'ヴ': 'ゔ', 'ヽ': 'ゝ',
        'ヾ': 'ゞ', '・': '・', '「': '「', '」': '」', '。': '。', '、': '、'                         }


conv = { 'ぁ': 0b0000001, 'あ': 0b0000010, 'ぃ': 0b0000011, 'い': 0b0000100, 'ぅ': 0b0000101, 'う': 0b0000110,
         'ぇ': 0b0000111, 'え': 0b0001000, 'ぉ': 0b0001001, 'お': 0b0001010, 'か': 0b0001011, 'が': 0b0001100,
         'き': 0b0001101, 'ぎ': 0b0001110, 'く': 0b0001111, 'ぐ': 0b0010000, 'け': 0b0010001, 'げ': 0b0010010,
         'こ': 0b0010011, 'ご': 0b0010100, 'さ': 0b0010101, 'ざ': 0b0010110, 'し': 0b0010111, 'じ': 0b0011000,
         'す': 0b0011001, 'ず': 0b0011010, 'せ': 0b0011011, 'ぜ': 0b0011100, 'そ': 0b0011101, 'ぞ': 0b0011110,
         'た': 0b0011111, 'だ': 0b0100000, 'ち': 0b0100001, 'ぢ': 0b0100010, 'っ': 0b0100011, 'つ': 0b0100100,
         'づ': 0b0100101, 'て': 0b0100110, 'で': 0b0100111, 'と': 0b0101000, 'ど': 0b0101001, 'な': 0b0101010,
         'に': 0b0101011, 'ぬ': 0b0101100, 'ね': 0b0101101, 'の': 0b0101110, 'は': 0b0101111, 'ば': 0b0110000,
         'ぱ': 0b0110001, 'ひ': 0b0110010, 'び': 0b0110011, 'ぴ': 0b0110100, 'ふ': 0b0110101, 'ぶ': 0b0110110,
         'ぷ': 0b0110111, 'へ': 0b0111000, 'べ': 0b0111001, 'ぺ': 0b0111010, 'ほ': 0b0111011, 'ぼ': 0b0111100,
         'ぽ': 0b0111101, 'ま': 0b0111110, 'み': 0b0111111, 'む': 0b1000000, 'め': 0b1000001, 'も': 0b1000010,
         'ゃ': 0b1000011, 'や': 0b1000100, 'ゅ': 0b1000101, 'ゆ': 0b1000110, 'ょ': 0b1000111, 'よ': 0b1001000,
         'ら': 0b1001001, 'り': 0b1001010, 'る': 0b1001011, 'れ': 0b1001100, 'ろ': 0b1001101, 'わ': 0b1001110,
         'を': 0b1001111, 'ん': 0b1010000, 'ー': 0b1010001, 'ゎ': 0b1010010, 'ゐ': 0b1010011, 'ゑ': 0b1010100,
         'ゕ': 0b1010101, 'ゖ': 0b1010110, 'ゔ': 0b1010111, 'ゝ': 0b1011000, 'ゞ': 0b1011001, '・': 0b1011010,
         '「': 0b1011011, '」': 0b1011100, '。': 0b1011101, '、': 0b1011110 }

fd = { 'ぁ': 'あ', 'ぃ': 'い', 'ぅ': 'う', 'ぇ': 'え', 'ぉ': 'お', 'ゎ': 'あ',
       'あ': 'あ', 'い': 'い', 'う': 'う', 'え': 'え', 'お': 'お', 'か': 'あ',
       'が': 'あ', 'き': 'い', 'ぎ': 'い', 'く': 'う', 'ぐ': 'う', 'け': 'え', 
       'げ': 'え', 'こ': 'お', 'ご': 'お', 'さ': 'あ', 'ざ': 'あ', 'し': 'い', 
       'じ': 'い', 'す': 'う', 'ず': 'う', 'せ': 'え', 'ぜ': 'え', 'そ': 'お', 
       'ぞ': 'お', 'た': 'あ', 'だ': 'あ', 'ち': 'あ', 'ぢ': 'あ', 'っ': 'う', 
       'つ': 'う', 'づ': 'う', 'て': 'え', 'で': 'え', 'と': 'お', 'ど': 'お', 
       'な': 'あ', 'に': 'い', 'ぬ': 'う', 'ね': 'え', 'の': 'お', 'は': 'あ', 
       'ば': 'あ', 'ぱ': 'あ', 'ひ': 'い', 'び': 'い', 'ぴ': 'い', 'ふ': 'う', 
       'ぶ': 'う', 'ぷ': 'う', 'へ': 'え', 'べ': 'え', 'ぺ': 'え', 'ほ': 'お', 
       'ぼ': 'お', 'ぽ': 'お', 'ま': 'あ', 'み': 'い', 'む': 'う', 'め': 'え', 
       'も': 'お', 'ゃ': 'あ', 'や': 'あ', 'ゅ': 'う', 'ゆ': 'う', 'ょ': 'お', 
       'よ': 'お', 'ら': 'あ', 'り': 'い', 'る': 'う', 'れ': 'え', 'ろ': 'お', 
       'わ': 'あ', 'を': 'お', 'ん': 'ん', 'ゕ': 'あ', 'ゖ': 'え', 'ゔ': 'う',
       'ゐ': 'い', 'ゑ': 'え'
       }

def fix_dash(ls, x):
    return fd[ls[x-1]]

def toHiragana(str):
    ls = list(str)
    for i in range(ls.__len__()):
        if ls[i] in K2H:
            ls[i] = K2H[ls[i]]
        if ls[i] == 'ー':
            ls[i] = fix_dash(ls, i)
    return ''.join(ls)

def toNum(str):
    pos = 1<<57
    res = 0
    for i in str:
        res += conv[i] * pos
        pos >>= 7
    return res

def fix_rebs(rebs):
    for i in range(len(rebs)):
        rebs[i] = toNum(toHiragana(rebs[i]))
    return list(dict.fromkeys(rebs))

def main():
    tree = ET.parse('/home/arch/Git/r2k/dict/JMdict_e.xml')
    root = tree.getroot()
    l = root.__len__()
    print("Loaded dict!")

    for i in range(l):
        kebs = []
        rebs = []
        for elem in root[i]:
            for sub in elem:
                if sub.tag == 'keb':
                    kebs.append(sub.text)
                elif sub.tag == 'reb':
                    if sub.text.__len__() <= 9:
                        rebs.append(sub.text)
        if len(kebs) > 0 and len(rebs) > 0:
            rebs = fix_rebs(rebs)
            add_combinations(kebs, rebs)

    print(f'Got all words and readings ({len(wbuf)})')

    wbuf_sorted = sorted(wbuf, key=itemgetter(0))

    for i in wbuf_sorted:
        print(f'{i[0]} {i[1]}', file=dic)
    # print('', file=dic)

    dic.close()
    # bad.close()




if __name__ == '__main__':
    main()



'''
if len(kebs) > 0:
    for reb in rebs:
        if len(reb) > maxrl:
            print("New maxrl!")
            print(len(reb))
            print(rebs)
            maxrl = len(reb)
            maxr = []
            maxr.append(rebs)
            break
        elif len(reb) == maxrl:
            maxr.append(rebs)
            print(maxr)
'''
